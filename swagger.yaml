openapi: 3.0.0
info:
  title: Doctor API
  version: 1.0.0
  description: >
    Doctor API documentation for the Telemedicine system.

servers:
  - url: http://localhost:4000
    description: Local development server

paths:
  /api/health:
    get:
      summary: Check server status
      description: Endpoint to check if the server is running properly
      tags:
        - Test
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server is Running."
                  status:
                    type: boolean
                    example: true

  /api/test/encrypt:
    post:
      summary: Encrypt Password
      description: Encrypts a plain text password using Bcrypt and returns the hashed value.
      tags:
        - Test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: mypassword123
                  description: The plain text password to be encrypted.
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: mypassword123
                  description: The plain text password to be encrypted.
      responses:
        '200':
          description: Password encrypted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "$2b$14$p.Fv7a5PbQVrwnSgQGFfHe96gpZKB0xRPIY.PN4FvWyfvhHC08gR2"
                    description: The Bcrypt hashed password.
                  status:
                    type: boolean
                    example: true
                    description: Indicates success.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password is required."
                    description: Error message.
                  status:
                    type: boolean
                    example: false
                    description: Indicates failure.
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This API is not allowed in production."
                    description: Error message.
                  status:
                    type: boolean
                    example: false
                    description: Indicates failure.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error."
                    description: Error message.
                  status:
                    type: boolean
                    example: false
                    description: Indicates failure.

  /api/test/decrypt:
    post:
      summary: Decrypt Password
      description: Decrypts a plain text password against a Bcrypt hash.
      tags:
        - Test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - hash
              properties:
                password:
                  type: string
                  example: mypassword123
                  description: The plain text password to decrypt.
                hash:
                  type: string
                  example: "$2b$14$p.Fv7a5PbQVrwnSgQGFfHe96gpZKB0xRPIY.PN4FvWyfvhHC08gR2"
                  description: The Bcrypt hashed password to compare against.
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - password
                - hash
              properties:
                password:
                  type: string
                  example: mypassword123
                  description: The plain text password to decrypt.
                hash:
                  type: string
                  example: "$2b$14$p.Fv7a5PbQVrwnSgQGFfHe96gpZKB0xRPIY.PN4FvWyfvhHC08gR2"
                  description: The Bcrypt hashed password to compare against.
      responses:
        '200':
          description: Password decrypted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The password is correct."
                    description: Verification message.
                  status:
                    type: boolean
                    example: true
                    description: Indicates success.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password and hash are required."
                    description: Error message.
                  status:
                    type: boolean
                    example: false
                    description: Indicates failure.
        '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "This API is not allowed in production."
                      description: Error message.
                    status:
                      type: boolean
                      example: false
                      description: Indicates failure.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error."
                    description: Error message.
                  status:
                    type: boolean
                    example: false
                    description: Indicates failure.

  /api/verifyToken:
    post:
      summary: Verify Token for Website
      description: Verifies the JWT token sent via HttpOnly cookie and returns user info if valid.
      tags:
        - Verify
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  Users_ID:
                    type: integer
                    example: 123
                  Users_Email:
                    type: string
                    example: user@example.com
                  Users_Username:
                    type: string
                    example: username123
                  UsersType_ID:
                    type: integer
                    example: 1
                  Users_Type:
                    type: string
                    example: doctor
                  message:
                    type: string
                    example: Token is valid.
                  status:
                    type: boolean
                    example: true
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token.
                  status:
                    type: boolean
                    example: false
      security: []

  /api/login:
    post:
      summary: Login Website
      description: Authenticates a doctor or patient user and sets an HttpOnly token cookie
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Users_Email
                - Users_Password
              properties:
                Users_Email:
                  type: string
                  description: User email or username
                  example: patient@gmail.com
                Users_Password:
                  type: string
                  description: User password
                  example: Cs12345678
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - Users_Email
                - Users_Password
              properties:
                Users_Email:
                  type: string
                  description: User email or username
                  example: patient@gmail.com
                Users_Password:
                  type: string
                  description: User password
                  example: Cs12345678
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The login was successful.
                  status:
                    type: boolean
                    example: true
          headers:
            Set-Cookie:
              description: HttpOnly cookie containing JWT token
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Missing or invalid parameters / Invalid user type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please fill in the correct parameters as required.
                  status:
                    type: boolean
                    example: false
        '401':
          description: Email or password incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email or password is incorrect.
                  status:
                    type: boolean
                    example: false
        '404':
          description: User type details not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User type details not found.
                  status:
                    type: boolean
                    example: false
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred on the server.
                  status:
                    type: boolean
                    example: false
      security: []

  /api/logout:
    post:
      summary: Logout Website
      description: Clears the user's token cookie and logs out the user
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully.
                  status:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized / Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                  status:
                    type: boolean
                    example: false
      security: []

  /api/register/patient:
    post:
      tags:
        - Authentication
      summary: Register a new patient
      description: >
        Registers a new patient account. All required fields must be provided and validated.
        Password must be strong. First and last names can contain Thai or English letters.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Users_Email
                - Users_Username
                - Users_Password
                - Patient_FirstName
                - Patient_LastName
                - Patient_Gender
              properties:
                Users_Email:
                  type: string
                  format: email
                  example: patient1@example.com
                Users_Username:
                  type: string
                  example: patient1
                Users_Password:
                  type: string
                  example: StrongPass1
                Patient_FirstName:
                  type: string
                  example: Somchai
                Patient_LastName:
                  type: string
                  example: Kongmee
                Patient_Phone:
                  type: string
                  example: '0812345678'
                Patient_Gender:
                  type: string
                  enum: [Male, Female]
                  example: Male
                Patient_MedicalHistory:
                  type: string
                  example: Has allergy to penicillin
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - Users_Email
                - Users_Username
                - Users_Password
                - Patient_FirstName
                - Patient_LastName
                - Patient_Gender
              properties:
                Users_Email:
                  type: string
                  format: email
                  example: patient1@example.com
                Users_Username:
                  type: string
                  example: patient1
                Users_Password:
                  type: string
                  example: StrongPass1
                Patient_FirstName:
                  type: string
                  example: Somchai
                Patient_LastName:
                  type: string
                  example: Kongmee
                Patient_Phone:
                  type: string
                  example: '0812345678'
                Patient_Gender:
                  type: string
                  enum: [Male, Female]
                  example: Male
                Patient_MedicalHistory:
                  type: string
                  example: Has allergy to penicillin
      responses:
        '201':
          description: Patient registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Patient registered successfully.
                  status:
                    type: boolean
                    example: true
                  Users_ID:
                    type: integer
                    example: 1
                  Patient_ID:
                    type: integer
                    example: 1
        '400':
          description: Invalid input / validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please fill in all required fields.
                  status:
                    type: boolean
                    example: false
        '409':
          description: Email or username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email or username already exists.
                  status:
                    type: boolean
                    example: false
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Database error
                  status:
                    type: boolean
                    example: false

  /api/profile/get:
    get:
      tags:
        - Profile
      summary: Get user profile by token
      description: Retrieve the profile data of a logged-in user (doctor or patient) using the JWT token.
      operationId: getProfileByToken
      parameters: []
      responses:
        '200':
          description: Profile data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Profile data retrieved successfully."
                  Users_Type_Table:
                    type: string
                    example: "patient"
                  Users_Email:
                    type: string
                    example: "user@example.com"
                  Users_Type:
                    type: string
                    enum: [patient, doctor]
                  Patient_ID:
                    type: integer
                    example: 101
                  Doctor_ID:
                    type: integer
                    example: 201
                  Specialty_Name:
                    type: string
                    example: "Cardiology"
        '400':
          description: Missing or invalid user type / ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Missing user type or ID."
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid Token."
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "No profile data found for this user."
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "An error occurred on the server."
    security: []

  /api/profile/patient/update:
    put:
      tags:
        - Profile
      summary: Update patient profile
      description: >
        Allows authenticated patients to update their profile information.
        Only fields provided in the request body will be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Patient_FirstName:
                  type: string
                  maxLength: 100
                  description: Patient's first name (optional)
                Patient_LastName:
                  type: string
                  maxLength: 100
                  description: Patient's last name (optional)
                Patient_Phone:
                  type: string
                  description: Thai phone number (digits only, 8-20 characters, optional)
                Patient_Gender:
                  type: string
                  enum: [male, female]
                  description: Patient's gender (optional)
                Patient_MedicalHistory:
                  type: string
                  maxLength: 1023
                  description: Patient's medical history (optional)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: boolean
                  example:
                    message: "Patient profile updated successfully."
                    status: true
        '400':
          description: Bad request due to invalid or missing data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: boolean
                  example:
                    message: "No fields provided for update."
                    status: false
        '403':
          description: Forbidden - user is not a patient
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: boolean
                  example:
                    message: "Permission denied. Only patients can perform this action."
                    status: false
        '404':
          description: Patient profile not found or no changes made
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: boolean
                  example:
                    message: "Patient profile not found."
                    status: false
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: boolean
                  example:
                    message: "Database error occurred."
                    status: false
    security: []

  /api/doctor/specialty/get/{Specialty_Name}:
    get:
      tags:
        - Doctor
      summary: Get doctors by specialty name
      description: Retrieve a list of active doctors matching the given specialty name (partial match allowed)
      parameters:
        - name: Specialty_Name
          in: path
          required: true
          description: Specialty name to search for (partial match supported)
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Doctors found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        Doctor_ID:
                          type: integer
                          example: 1
                        Doctor_FirstName:
                          type: string
                          example: John
                        Doctor_LastName:
                          type: string
                          example: Doe
                        Doctor_Phone:
                          type: string
                          example: "0812345678"
                        Specialty_Name:
                          type: string
                          example: Cardiology
                  message:
                    type: string
                    example: Specialty retrieved successfully.
                  status:
                    type: boolean
                    example: true
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid Specialty parameter.
                  status:
                    type: boolean
                    example: false
        '404':
          description: No doctors found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No doctors found for this specialty.
                  status:
                    type: boolean
                    example: false
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred.
                  status:
                    type: boolean
                    example: false
    security: []      

  /api/doctor/name/get/{doctorName}:
    get:
      summary: Get doctors by first or last name
      description: Retrieve a list of doctors whose first name or last name matches the search query. Requires authentication.
      tags:
        - Doctor
      parameters:
        - name: doctorName
          in: path
          description: The first or last name of the doctor to search
          required: true
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: List of doctors found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Doctors retrieved successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        Doctor_ID:
                          type: integer
                          example: 1
                        Doctor_FirstName:
                          type: string
                          example: John
                        Doctor_LastName:
                          type: string
                          example: Doe
                        Doctor_Phone:
                          type: string
                          example: "0812345678"
                        Specialty_Name:
                          type: string
                          example: Cardiology
        '400':
          description: Invalid user ID or doctorName parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Missing or invalid Users_ID from token.
        '404':
          description: No doctors found with this name
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No doctors found with this name.
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: An unexpected error occurred.
    security: []     

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: boolean
